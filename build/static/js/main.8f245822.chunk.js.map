{"version":3,"sources":["Header.js","Watch.js","Upload.js","App.js","serviceWorker.js","index.js"],"names":["Header","setNav","onClick","Watch","useState","src","setSource","useEffect","fetchVideoSrc","a","fetch","res","json","parsedRes","controls","loop","autoPlay","key","type","Upload","setVideoSource","handleSubmitFile","onSubmit","name","onChange","e","preventDefault","target","files","value","App","nav","videoSource","formData","FormData","append","axios","post","headers","then","response","console","log","catch","error","className","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"iQAEMA,EAAS,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OACd,OACI,6BACI,4BACA,4BACI,uBAAGC,QAAS,kBAAMD,EAAO,WAAzB,gBAEJ,4BACI,uBAAGC,QAAS,kBAAMD,EAAO,YAAzB,oBCRVE,G,MAAQ,WAAO,IAAD,EACSC,qBADT,mBACTC,EADS,KACJC,EADI,KAahB,OAVAC,qBAAU,WACN,IAAMC,EAAa,uCAAG,8BAAAC,EAAA,sEACAC,MAAM,UADN,cACZC,EADY,gBAEMA,EAAIC,OAFV,OAEZC,EAFY,OAGlBP,EAAUO,GAHQ,2CAAH,qDAMnBP,EAAUE,OACX,IAGC,2BAAOM,UAAQ,EAACC,MAAI,EAACC,UAAQ,EAACC,IAAKZ,GAC/B,4BAAQA,IAAG,6DAAwDA,GAAOa,KAAK,iBCfrFC,EAAS,SAAC,GAA0C,IAAxCC,EAAuC,EAAvCA,eAAgBC,EAAuB,EAAvBA,iBAE9B,OACI,0BAAMC,SAAUD,GACZ,2BAAOH,KAAK,OAAOK,KAAK,QAAQC,SAAU,SAACC,GACvCA,EAAEC,iBACFN,EAAeK,EAAEE,OAAOC,MAAM,OAElC,2BAAOV,KAAK,SAASW,MAAM,a,iBC4BxBC,MA/Bf,WAAgB,IAAD,EACS1B,mBAAS,SADlB,mBACN2B,EADM,KACD9B,EADC,OAEyBG,qBAFzB,mBAEN4B,EAFM,KAEOZ,EAFP,KAIPC,EAAgB,uCAAG,WAAOI,GAAP,eAAAhB,EAAA,sDACvBgB,EAAEC,kBACIO,EAAW,IAAIC,UACZC,OAAO,OAAQH,GACxBI,IAAMC,KAAN,gBAA4BJ,EAAU,CACpCK,QAAS,CACP,eAAgB,yBAEjBC,MAAK,SAAAC,GACNC,QAAQC,IAAIF,MACXG,OAAM,SAAAC,GACPH,QAAQC,IAAIE,MAXS,2CAAH,sDAetB,OACE,yBAAKC,UAAU,OACb,kBAAC,EAAD,CAAQ5C,OAAQA,IACP,UAAR8B,EACC,kBAAC,EAAD,MAEF,kBAAC,EAAD,CAAQX,eAAgBA,EAAgBC,iBAAkBA,MCpB5CyB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMlB,MAAK,SAAAmB,GACjCA,EAAaC,kB","file":"static/js/main.8f245822.chunk.js","sourcesContent":["import React from 'react';\n\nconst Header = ({ setNav }) => {\n    return (\n        <nav>\n            <ul>\n            <li>\n                <a onClick={() => setNav('watch')}>Watch Video</a>\n            </li>\n            <li>\n                <a onClick={() => setNav('upload')}>Upload Video</a>\n            </li>\n            </ul>\n        </nav>\n    );\n};\n\nexport {\n    Header\n};","import React, { useState, useEffect } from 'react';\n\nconst Watch = () => {\n    const [src, setSource] = useState();\n\n    useEffect(() => {\n        const fetchVideoSrc = async () => {\n            const res = await fetch('/video');\n            const parsedRes = await res.json();\n            setSource(parsedRes);\n        }\n\n        setSource(fetchVideoSrc());\n    }, []);\n\n    return (\n        <video controls loop autoPlay key={src}>\n            <source src={`https://live-video-feed.s3.us-east-2.amazonaws.com/${src}`} type=\"video/mp4\"/>\n        </video>\n    );\n}\n\nexport {\n    Watch\n};","import React from 'react';\n\nconst Upload = ({ setVideoSource, handleSubmitFile }) => {\n    \n    return (\n        <form onSubmit={handleSubmitFile}>\n            <input type=\"file\" name=\"video\" onChange={(e) => {\n                e.preventDefault();\n                setVideoSource(e.target.files[0]);\n            }}/>\n            <input type=\"submit\" value=\"Submit\"/>\n        </form>\n    );\n}\n\nexport {\n    Upload\n}","import React, { useState, useEffect } from 'react';\nimport { Header } from './Header';\nimport './App.css';\nimport { Watch } from './Watch';\nimport { Upload } from './Upload';\nimport axios from 'axios';\n\nfunction App() {\n  const [nav, setNav] = useState('watch');\n  const [videoSource, setVideoSource] = useState();\n\n  const handleSubmitFile = async (e) => {\n    e.preventDefault();\n    const formData = new FormData();\n    formData.append('file', videoSource);\n    axios.post(`/upload-video`, formData, {\n      headers: {\n        'Content-Type': 'multipart/form-data'\n      }\n    }).then(response => {\n      console.log(response);\n    }).catch(error => {\n      console.log(error);\n    });\n  }\n\n  return (\n    <div className=\"App\">\n      <Header setNav={setNav}/>\n      {nav === 'watch' ? (\n        <Watch/>\n      ) : (\n      <Upload setVideoSource={setVideoSource} handleSubmitFile={handleSubmitFile}/>\n      )}\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}